# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TetonTest', [dirname(__file__)])
        except ImportError:
            import _TetonTest
            return _TetonTest
        if fp is not None:
            try:
                _mod = imp.load_module('_TetonTest', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _TetonTest = swig_import_helper()
    del swig_import_helper
else:
    import _TetonTest
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _TetonTest.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _TetonTest.SwigPyIterator_value(self)
    def incr(self, n = 1): return _TetonTest.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _TetonTest.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _TetonTest.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _TetonTest.SwigPyIterator_equal(self, *args)
    def copy(self): return _TetonTest.SwigPyIterator_copy(self)
    def next(self): return _TetonTest.SwigPyIterator_next(self)
    def __next__(self): return _TetonTest.SwigPyIterator___next__(self)
    def previous(self): return _TetonTest.SwigPyIterator_previous(self)
    def advance(self, *args): return _TetonTest.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _TetonTest.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _TetonTest.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _TetonTest.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _TetonTest.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _TetonTest.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _TetonTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _TetonTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MeshBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TetonTest.new_MeshBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfOwnedNodes(self): return _TetonTest.MeshBase_getNumberOfOwnedNodes(self)
    def getNumberOfOwnedZones(self): return _TetonTest.MeshBase_getNumberOfOwnedZones(self)
    def ownedZones(self): return _TetonTest.MeshBase_ownedZones(self)
    __swig_destroy__ = _TetonTest.delete_MeshBase
    __del__ = lambda self : None;
MeshBase_swigregister = _TetonTest.MeshBase_swigregister
MeshBase_swigregister(MeshBase)

class ZoneBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TetonTest.new_ZoneBase()
        try: self.this.append(this)
        except: self.this = this
    def getPosition(self): return _TetonTest.ZoneBase_getPosition(self)
    __swig_destroy__ = _TetonTest.delete_ZoneBase
    __del__ = lambda self : None;
ZoneBase_swigregister = _TetonTest.ZoneBase_swigregister
ZoneBase_swigregister(ZoneBase)

class TetonBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonBoundary, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TetonTest.new_TetonBoundary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_TetonBoundary
    __del__ = lambda self : None;
TetonBoundary_swigregister = _TetonTest.TetonBoundary_swigregister
TetonBoundary_swigregister(TetonBoundary)

class TetonFreq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonFreq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonFreq, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _TetonTest.delete_TetonFreq
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _TetonTest.new_TetonFreq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["qtype"] = _TetonTest.TetonFreq_qtype_set
    __swig_getmethods__["qtype"] = _TetonTest.TetonFreq_qtype_get
    if _newclass:qtype = _swig_property(_TetonTest.TetonFreq_qtype_get, _TetonTest.TetonFreq_qtype_set)
    __swig_setmethods__["qorder"] = _TetonTest.TetonFreq_qorder_set
    __swig_getmethods__["qorder"] = _TetonTest.TetonFreq_qorder_get
    if _newclass:qorder = _swig_property(_TetonTest.TetonFreq_qorder_get, _TetonTest.TetonFreq_qorder_set)
    __swig_setmethods__["npolar"] = _TetonTest.TetonFreq_npolar_set
    __swig_getmethods__["npolar"] = _TetonTest.TetonFreq_npolar_get
    if _newclass:npolar = _swig_property(_TetonTest.TetonFreq_npolar_get, _TetonTest.TetonFreq_npolar_set)
    __swig_setmethods__["nazimu"] = _TetonTest.TetonFreq_nazimu_set
    __swig_getmethods__["nazimu"] = _TetonTest.TetonFreq_nazimu_get
    if _newclass:nazimu = _swig_property(_TetonTest.TetonFreq_nazimu_get, _TetonTest.TetonFreq_nazimu_set)
    __swig_setmethods__["paxis"] = _TetonTest.TetonFreq_paxis_set
    __swig_getmethods__["paxis"] = _TetonTest.TetonFreq_paxis_get
    if _newclass:paxis = _swig_property(_TetonTest.TetonFreq_paxis_get, _TetonTest.TetonFreq_paxis_set)
    __swig_setmethods__["bot"] = _TetonTest.TetonFreq_bot_set
    __swig_getmethods__["bot"] = _TetonTest.TetonFreq_bot_get
    if _newclass:bot = _swig_property(_TetonTest.TetonFreq_bot_get, _TetonTest.TetonFreq_bot_set)
    __swig_setmethods__["top"] = _TetonTest.TetonFreq_top_set
    __swig_getmethods__["top"] = _TetonTest.TetonFreq_top_get
    if _newclass:top = _swig_property(_TetonTest.TetonFreq_top_get, _TetonTest.TetonFreq_top_set)
TetonFreq_swigregister = _TetonTest.TetonFreq_swigregister
TetonFreq_swigregister(TetonFreq)

class OpacityBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpacityBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpacityBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TetonTest.new_OpacityBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_OpacityBase
    __del__ = lambda self : None;
OpacityBase_swigregister = _TetonTest.OpacityBase_swigregister
OpacityBase_swigregister(OpacityBase)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TetonTest.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_Material
    __del__ = lambda self : None;
Material_swigregister = _TetonTest.Material_swigregister
Material_swigregister(Material)

CONSTANT = _TetonTest.CONSTANT
MARSHAK = _TetonTest.MARSHAK
class BCH(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BCH, name)
    __repr__ = _swig_repr
    __swig_setmethods__["kface"] = _TetonTest.BCH_kface_set
    __swig_getmethods__["kface"] = _TetonTest.BCH_kface_get
    if _newclass:kface = _swig_property(_TetonTest.BCH_kface_get, _TetonTest.BCH_kface_set)
    __swig_setmethods__["iptype"] = _TetonTest.BCH_iptype_set
    __swig_getmethods__["iptype"] = _TetonTest.BCH_iptype_get
    if _newclass:iptype = _swig_property(_TetonTest.BCH_iptype_get, _TetonTest.BCH_iptype_set)
    __swig_setmethods__["prof"] = _TetonTest.BCH_prof_set
    __swig_getmethods__["prof"] = _TetonTest.BCH_prof_get
    if _newclass:prof = _swig_property(_TetonTest.BCH_prof_get, _TetonTest.BCH_prof_set)
    def __init__(self): 
        this = _TetonTest.new_BCH()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_BCH
    __del__ = lambda self : None;
BCH_swigregister = _TetonTest.BCH_swigregister
BCH_swigregister(BCH)

class BCS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BCS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BCS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["side"] = _TetonTest.BCS_side_set
    __swig_getmethods__["side"] = _TetonTest.BCS_side_get
    if _newclass:side = _swig_property(_TetonTest.BCS_side_get, _TetonTest.BCS_side_set)
    __swig_setmethods__["kface"] = _TetonTest.BCS_kface_set
    __swig_getmethods__["kface"] = _TetonTest.BCS_kface_get
    if _newclass:kface = _swig_property(_TetonTest.BCS_kface_get, _TetonTest.BCS_kface_set)
    def __init__(self): 
        this = _TetonTest.new_BCS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_BCS
    __del__ = lambda self : None;
BCS_swigregister = _TetonTest.BCS_swigregister
BCS_swigregister(BCS)

class TetonVolumeSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonVolumeSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonVolumeSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _TetonTest.delete_TetonVolumeSource
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _TetonTest.new_TetonVolumeSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["zoneids"] = _TetonTest.TetonVolumeSource_zoneids_set
    __swig_getmethods__["zoneids"] = _TetonTest.TetonVolumeSource_zoneids_get
    if _newclass:zoneids = _swig_property(_TetonTest.TetonVolumeSource_zoneids_get, _TetonTest.TetonVolumeSource_zoneids_set)
    __swig_setmethods__["vsname"] = _TetonTest.TetonVolumeSource_vsname_set
    __swig_getmethods__["vsname"] = _TetonTest.TetonVolumeSource_vsname_get
    if _newclass:vsname = _swig_property(_TetonTest.TetonVolumeSource_vsname_get, _TetonTest.TetonVolumeSource_vsname_set)
    __swig_setmethods__["profile"] = _TetonTest.TetonVolumeSource_profile_set
    __swig_getmethods__["profile"] = _TetonTest.TetonVolumeSource_profile_get
    if _newclass:profile = _swig_property(_TetonTest.TetonVolumeSource_profile_get, _TetonTest.TetonVolumeSource_profile_set)
TetonVolumeSource_swigregister = _TetonTest.TetonVolumeSource_swigregister
TetonVolumeSource_swigregister(TetonVolumeSource)

class TimeTempsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTempsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTempsVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.TimeTempsVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.TimeTempsVector___nonzero__(self)
    def __bool__(self): return _TetonTest.TimeTempsVector___bool__(self)
    def __len__(self): return _TetonTest.TimeTempsVector___len__(self)
    def pop(self): return _TetonTest.TimeTempsVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.TimeTempsVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.TimeTempsVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.TimeTempsVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.TimeTempsVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.TimeTempsVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.TimeTempsVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.TimeTempsVector_append(self, *args)
    def empty(self): return _TetonTest.TimeTempsVector_empty(self)
    def size(self): return _TetonTest.TimeTempsVector_size(self)
    def clear(self): return _TetonTest.TimeTempsVector_clear(self)
    def swap(self, *args): return _TetonTest.TimeTempsVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.TimeTempsVector_get_allocator(self)
    def begin(self): return _TetonTest.TimeTempsVector_begin(self)
    def end(self): return _TetonTest.TimeTempsVector_end(self)
    def rbegin(self): return _TetonTest.TimeTempsVector_rbegin(self)
    def rend(self): return _TetonTest.TimeTempsVector_rend(self)
    def pop_back(self): return _TetonTest.TimeTempsVector_pop_back(self)
    def erase(self, *args): return _TetonTest.TimeTempsVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_TimeTempsVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.TimeTempsVector_push_back(self, *args)
    def front(self): return _TetonTest.TimeTempsVector_front(self)
    def back(self): return _TetonTest.TimeTempsVector_back(self)
    def assign(self, *args): return _TetonTest.TimeTempsVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.TimeTempsVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.TimeTempsVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.TimeTempsVector_reserve(self, *args)
    def capacity(self): return _TetonTest.TimeTempsVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_TimeTempsVector
    __del__ = lambda self : None;
TimeTempsVector_swigregister = _TetonTest.TimeTempsVector_swigregister
TimeTempsVector_swigregister(TimeTempsVector)

class Teton_MeshBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Teton_MeshBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Teton_MeshBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TetonTest.new_Teton_MeshBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_Teton_MeshBase
    __del__ = lambda self : None;
    def resize(self): return _TetonTest.Teton_MeshBase_resize(self)
    def cxxRadtr(self): return _TetonTest.Teton_MeshBase_cxxRadtr(self)
    def setBCs(self, *args): return _TetonTest.Teton_MeshBase_setBCs(self, *args)
    def setVSs(self, *args): return _TetonTest.Teton_MeshBase_setVSs(self, *args)
    def setAProfile(self, *args): return _TetonTest.Teton_MeshBase_setAProfile(self, *args)
    def setGroups(self, *args): return _TetonTest.Teton_MeshBase_setGroups(self, *args)
    def setMeshSizeAndPositions(self, *args): return _TetonTest.Teton_MeshBase_setMeshSizeAndPositions(self, *args)
    def setCommunication(self, *args): return _TetonTest.Teton_MeshBase_setCommunication(self, *args)
    def linkKull(self, *args): return _TetonTest.Teton_MeshBase_linkKull(self, *args)
    def CInitMaterial(self, *args): return _TetonTest.Teton_MeshBase_CInitMaterial(self, *args)
    def CupdateSn(self, *args): return _TetonTest.Teton_MeshBase_CupdateSn(self, *args)
    def CupdateSpecificEnergy(self, *args): return _TetonTest.Teton_MeshBase_CupdateSpecificEnergy(self, *args)
    def CsetControls(self): return _TetonTest.Teton_MeshBase_CsetControls(self)
    __swig_setmethods__["ndim"] = _TetonTest.Teton_MeshBase_ndim_set
    __swig_getmethods__["ndim"] = _TetonTest.Teton_MeshBase_ndim_get
    if _newclass:ndim = _swig_property(_TetonTest.Teton_MeshBase_ndim_get, _TetonTest.Teton_MeshBase_ndim_set)
    __swig_setmethods__["nbc"] = _TetonTest.Teton_MeshBase_nbc_set
    __swig_getmethods__["nbc"] = _TetonTest.Teton_MeshBase_nbc_get
    if _newclass:nbc = _swig_property(_TetonTest.Teton_MeshBase_nbc_get, _TetonTest.Teton_MeshBase_nbc_set)
    __swig_setmethods__["nvs"] = _TetonTest.Teton_MeshBase_nvs_set
    __swig_getmethods__["nvs"] = _TetonTest.Teton_MeshBase_nvs_get
    if _newclass:nvs = _swig_property(_TetonTest.Teton_MeshBase_nvs_get, _TetonTest.Teton_MeshBase_nvs_set)
    __swig_setmethods__["my_node"] = _TetonTest.Teton_MeshBase_my_node_set
    __swig_getmethods__["my_node"] = _TetonTest.Teton_MeshBase_my_node_get
    if _newclass:my_node = _swig_property(_TetonTest.Teton_MeshBase_my_node_get, _TetonTest.Teton_MeshBase_my_node_set)
    __swig_setmethods__["n_Procs"] = _TetonTest.Teton_MeshBase_n_Procs_set
    __swig_getmethods__["n_Procs"] = _TetonTest.Teton_MeshBase_n_Procs_get
    if _newclass:n_Procs = _swig_property(_TetonTest.Teton_MeshBase_n_Procs_get, _TetonTest.Teton_MeshBase_n_Procs_set)
    __swig_setmethods__["ncycle"] = _TetonTest.Teton_MeshBase_ncycle_set
    __swig_getmethods__["ncycle"] = _TetonTest.Teton_MeshBase_ncycle_get
    if _newclass:ncycle = _swig_property(_TetonTest.Teton_MeshBase_ncycle_get, _TetonTest.Teton_MeshBase_ncycle_set)
    __swig_setmethods__["nbelem"] = _TetonTest.Teton_MeshBase_nbelem_set
    __swig_getmethods__["nbelem"] = _TetonTest.Teton_MeshBase_nbelem_get
    if _newclass:nbelem = _swig_property(_TetonTest.Teton_MeshBase_nbelem_get, _TetonTest.Teton_MeshBase_nbelem_set)
    __swig_setmethods__["nzones"] = _TetonTest.Teton_MeshBase_nzones_set
    __swig_getmethods__["nzones"] = _TetonTest.Teton_MeshBase_nzones_get
    if _newclass:nzones = _swig_property(_TetonTest.Teton_MeshBase_nzones_get, _TetonTest.Teton_MeshBase_nzones_set)
    __swig_setmethods__["ncornr"] = _TetonTest.Teton_MeshBase_ncornr_set
    __swig_getmethods__["ncornr"] = _TetonTest.Teton_MeshBase_ncornr_get
    if _newclass:ncornr = _swig_property(_TetonTest.Teton_MeshBase_ncornr_get, _TetonTest.Teton_MeshBase_ncornr_set)
    __swig_setmethods__["npnts"] = _TetonTest.Teton_MeshBase_npnts_set
    __swig_getmethods__["npnts"] = _TetonTest.Teton_MeshBase_npnts_get
    if _newclass:npnts = _swig_property(_TetonTest.Teton_MeshBase_npnts_get, _TetonTest.Teton_MeshBase_npnts_set)
    __swig_setmethods__["nfaces"] = _TetonTest.Teton_MeshBase_nfaces_set
    __swig_getmethods__["nfaces"] = _TetonTest.Teton_MeshBase_nfaces_get
    if _newclass:nfaces = _swig_property(_TetonTest.Teton_MeshBase_nfaces_get, _TetonTest.Teton_MeshBase_nfaces_set)
    __swig_setmethods__["nbedit"] = _TetonTest.Teton_MeshBase_nbedit_set
    __swig_getmethods__["nbedit"] = _TetonTest.Teton_MeshBase_nbedit_get
    if _newclass:nbedit = _swig_property(_TetonTest.Teton_MeshBase_nbedit_get, _TetonTest.Teton_MeshBase_nbedit_set)
    __swig_setmethods__["ngr"] = _TetonTest.Teton_MeshBase_ngr_set
    __swig_getmethods__["ngr"] = _TetonTest.Teton_MeshBase_ngr_get
    if _newclass:ngr = _swig_property(_TetonTest.Teton_MeshBase_ngr_get, _TetonTest.Teton_MeshBase_ngr_set)
    __swig_setmethods__["nangsn"] = _TetonTest.Teton_MeshBase_nangsn_set
    __swig_getmethods__["nangsn"] = _TetonTest.Teton_MeshBase_nangsn_get
    if _newclass:nangsn = _swig_property(_TetonTest.Teton_MeshBase_nangsn_get, _TetonTest.Teton_MeshBase_nangsn_set)
    __swig_setmethods__["noutmx"] = _TetonTest.Teton_MeshBase_noutmx_set
    __swig_getmethods__["noutmx"] = _TetonTest.Teton_MeshBase_noutmx_get
    if _newclass:noutmx = _swig_property(_TetonTest.Teton_MeshBase_noutmx_get, _TetonTest.Teton_MeshBase_noutmx_set)
    __swig_setmethods__["ninmx"] = _TetonTest.Teton_MeshBase_ninmx_set
    __swig_getmethods__["ninmx"] = _TetonTest.Teton_MeshBase_ninmx_get
    if _newclass:ninmx = _swig_property(_TetonTest.Teton_MeshBase_ninmx_get, _TetonTest.Teton_MeshBase_ninmx_set)
    __swig_setmethods__["ngdamx"] = _TetonTest.Teton_MeshBase_ngdamx_set
    __swig_getmethods__["ngdamx"] = _TetonTest.Teton_MeshBase_ngdamx_get
    if _newclass:ngdamx = _swig_property(_TetonTest.Teton_MeshBase_ngdamx_get, _TetonTest.Teton_MeshBase_ngdamx_set)
    __swig_setmethods__["nprof"] = _TetonTest.Teton_MeshBase_nprof_set
    __swig_getmethods__["nprof"] = _TetonTest.Teton_MeshBase_nprof_get
    if _newclass:nprof = _swig_property(_TetonTest.Teton_MeshBase_nprof_get, _TetonTest.Teton_MeshBase_nprof_set)
    __swig_setmethods__["GTAorder"] = _TetonTest.Teton_MeshBase_GTAorder_set
    __swig_getmethods__["GTAorder"] = _TetonTest.Teton_MeshBase_GTAorder_get
    if _newclass:GTAorder = _swig_property(_TetonTest.Teton_MeshBase_GTAorder_get, _TetonTest.Teton_MeshBase_GTAorder_set)
    __swig_setmethods__["npsi"] = _TetonTest.Teton_MeshBase_npsi_set
    __swig_getmethods__["npsi"] = _TetonTest.Teton_MeshBase_npsi_get
    if _newclass:npsi = _swig_property(_TetonTest.Teton_MeshBase_npsi_get, _TetonTest.Teton_MeshBase_npsi_set)
    __swig_setmethods__["noutrt"] = _TetonTest.Teton_MeshBase_noutrt_set
    __swig_getmethods__["noutrt"] = _TetonTest.Teton_MeshBase_noutrt_get
    if _newclass:noutrt = _swig_property(_TetonTest.Teton_MeshBase_noutrt_get, _TetonTest.Teton_MeshBase_noutrt_set)
    __swig_setmethods__["ninrt"] = _TetonTest.Teton_MeshBase_ninrt_set
    __swig_getmethods__["ninrt"] = _TetonTest.Teton_MeshBase_ninrt_get
    if _newclass:ninrt = _swig_property(_TetonTest.Teton_MeshBase_ninrt_get, _TetonTest.Teton_MeshBase_ninrt_set)
    __swig_setmethods__["ngdart"] = _TetonTest.Teton_MeshBase_ngdart_set
    __swig_getmethods__["ngdart"] = _TetonTest.Teton_MeshBase_ngdart_get
    if _newclass:ngdart = _swig_property(_TetonTest.Teton_MeshBase_ngdart_get, _TetonTest.Teton_MeshBase_ngdart_set)
    __swig_setmethods__["TrMaxZone"] = _TetonTest.Teton_MeshBase_TrMaxZone_set
    __swig_getmethods__["TrMaxZone"] = _TetonTest.Teton_MeshBase_TrMaxZone_get
    if _newclass:TrMaxZone = _swig_property(_TetonTest.Teton_MeshBase_TrMaxZone_get, _TetonTest.Teton_MeshBase_TrMaxZone_set)
    __swig_setmethods__["TeMaxZone"] = _TetonTest.Teton_MeshBase_TeMaxZone_set
    __swig_getmethods__["TeMaxZone"] = _TetonTest.Teton_MeshBase_TeMaxZone_get
    if _newclass:TeMaxZone = _swig_property(_TetonTest.Teton_MeshBase_TeMaxZone_get, _TetonTest.Teton_MeshBase_TeMaxZone_set)
    __swig_setmethods__["TiMaxZone"] = _TetonTest.Teton_MeshBase_TiMaxZone_set
    __swig_getmethods__["TiMaxZone"] = _TetonTest.Teton_MeshBase_TiMaxZone_get
    if _newclass:TiMaxZone = _swig_property(_TetonTest.Teton_MeshBase_TiMaxZone_get, _TetonTest.Teton_MeshBase_TiMaxZone_set)
    __swig_setmethods__["TrMaxNode"] = _TetonTest.Teton_MeshBase_TrMaxNode_set
    __swig_getmethods__["TrMaxNode"] = _TetonTest.Teton_MeshBase_TrMaxNode_get
    if _newclass:TrMaxNode = _swig_property(_TetonTest.Teton_MeshBase_TrMaxNode_get, _TetonTest.Teton_MeshBase_TrMaxNode_set)
    __swig_setmethods__["TeMaxNode"] = _TetonTest.Teton_MeshBase_TeMaxNode_set
    __swig_getmethods__["TeMaxNode"] = _TetonTest.Teton_MeshBase_TeMaxNode_get
    if _newclass:TeMaxNode = _swig_property(_TetonTest.Teton_MeshBase_TeMaxNode_get, _TetonTest.Teton_MeshBase_TeMaxNode_set)
    __swig_setmethods__["TiMaxNode"] = _TetonTest.Teton_MeshBase_TiMaxNode_set
    __swig_getmethods__["TiMaxNode"] = _TetonTest.Teton_MeshBase_TiMaxNode_get
    if _newclass:TiMaxNode = _swig_property(_TetonTest.Teton_MeshBase_TiMaxNode_get, _TetonTest.Teton_MeshBase_TiMaxNode_set)
    __swig_setmethods__["ConvControlNode"] = _TetonTest.Teton_MeshBase_ConvControlNode_set
    __swig_getmethods__["ConvControlNode"] = _TetonTest.Teton_MeshBase_ConvControlNode_get
    if _newclass:ConvControlNode = _swig_property(_TetonTest.Teton_MeshBase_ConvControlNode_get, _TetonTest.Teton_MeshBase_ConvControlNode_set)
    __swig_setmethods__["ConvControlZone"] = _TetonTest.Teton_MeshBase_ConvControlZone_set
    __swig_getmethods__["ConvControlZone"] = _TetonTest.Teton_MeshBase_ConvControlZone_get
    if _newclass:ConvControlZone = _swig_property(_TetonTest.Teton_MeshBase_ConvControlZone_get, _TetonTest.Teton_MeshBase_ConvControlZone_set)
    __swig_setmethods__["DtControlNode"] = _TetonTest.Teton_MeshBase_DtControlNode_set
    __swig_getmethods__["DtControlNode"] = _TetonTest.Teton_MeshBase_DtControlNode_get
    if _newclass:DtControlNode = _swig_property(_TetonTest.Teton_MeshBase_DtControlNode_get, _TetonTest.Teton_MeshBase_DtControlNode_set)
    __swig_setmethods__["DtControlZoneTr4"] = _TetonTest.Teton_MeshBase_DtControlZoneTr4_set
    __swig_getmethods__["DtControlZoneTr4"] = _TetonTest.Teton_MeshBase_DtControlZoneTr4_get
    if _newclass:DtControlZoneTr4 = _swig_property(_TetonTest.Teton_MeshBase_DtControlZoneTr4_get, _TetonTest.Teton_MeshBase_DtControlZoneTr4_set)
    __swig_setmethods__["DtControlZoneTe"] = _TetonTest.Teton_MeshBase_DtControlZoneTe_set
    __swig_getmethods__["DtControlZoneTe"] = _TetonTest.Teton_MeshBase_DtControlZoneTe_get
    if _newclass:DtControlZoneTe = _swig_property(_TetonTest.Teton_MeshBase_DtControlZoneTe_get, _TetonTest.Teton_MeshBase_DtControlZoneTe_set)
    __swig_setmethods__["ConvControlError"] = _TetonTest.Teton_MeshBase_ConvControlError_set
    __swig_getmethods__["ConvControlError"] = _TetonTest.Teton_MeshBase_ConvControlError_get
    if _newclass:ConvControlError = _swig_property(_TetonTest.Teton_MeshBase_ConvControlError_get, _TetonTest.Teton_MeshBase_ConvControlError_set)
    __swig_setmethods__["ConvControlTr"] = _TetonTest.Teton_MeshBase_ConvControlTr_set
    __swig_getmethods__["ConvControlTr"] = _TetonTest.Teton_MeshBase_ConvControlTr_get
    if _newclass:ConvControlTr = _swig_property(_TetonTest.Teton_MeshBase_ConvControlTr_get, _TetonTest.Teton_MeshBase_ConvControlTr_set)
    __swig_setmethods__["ConvControlTe"] = _TetonTest.Teton_MeshBase_ConvControlTe_set
    __swig_getmethods__["ConvControlTe"] = _TetonTest.Teton_MeshBase_ConvControlTe_get
    if _newclass:ConvControlTe = _swig_property(_TetonTest.Teton_MeshBase_ConvControlTe_get, _TetonTest.Teton_MeshBase_ConvControlTe_set)
    __swig_setmethods__["ConvControlRho"] = _TetonTest.Teton_MeshBase_ConvControlRho_set
    __swig_getmethods__["ConvControlRho"] = _TetonTest.Teton_MeshBase_ConvControlRho_get
    if _newclass:ConvControlRho = _swig_property(_TetonTest.Teton_MeshBase_ConvControlRho_get, _TetonTest.Teton_MeshBase_ConvControlRho_set)
    __swig_setmethods__["ConvControlCve"] = _TetonTest.Teton_MeshBase_ConvControlCve_set
    __swig_getmethods__["ConvControlCve"] = _TetonTest.Teton_MeshBase_ConvControlCve_get
    if _newclass:ConvControlCve = _swig_property(_TetonTest.Teton_MeshBase_ConvControlCve_get, _TetonTest.Teton_MeshBase_ConvControlCve_set)
    __swig_setmethods__["ConvControlEdep"] = _TetonTest.Teton_MeshBase_ConvControlEdep_set
    __swig_getmethods__["ConvControlEdep"] = _TetonTest.Teton_MeshBase_ConvControlEdep_get
    if _newclass:ConvControlEdep = _swig_property(_TetonTest.Teton_MeshBase_ConvControlEdep_get, _TetonTest.Teton_MeshBase_ConvControlEdep_set)
    __swig_setmethods__["DtControlChangeTr4"] = _TetonTest.Teton_MeshBase_DtControlChangeTr4_set
    __swig_getmethods__["DtControlChangeTr4"] = _TetonTest.Teton_MeshBase_DtControlChangeTr4_get
    if _newclass:DtControlChangeTr4 = _swig_property(_TetonTest.Teton_MeshBase_DtControlChangeTr4_get, _TetonTest.Teton_MeshBase_DtControlChangeTr4_set)
    __swig_setmethods__["DtControlChangeTe"] = _TetonTest.Teton_MeshBase_DtControlChangeTe_set
    __swig_getmethods__["DtControlChangeTe"] = _TetonTest.Teton_MeshBase_DtControlChangeTe_get
    if _newclass:DtControlChangeTe = _swig_property(_TetonTest.Teton_MeshBase_DtControlChangeTe_get, _TetonTest.Teton_MeshBase_DtControlChangeTe_set)
    __swig_setmethods__["DtControlTr"] = _TetonTest.Teton_MeshBase_DtControlTr_set
    __swig_getmethods__["DtControlTr"] = _TetonTest.Teton_MeshBase_DtControlTr_get
    if _newclass:DtControlTr = _swig_property(_TetonTest.Teton_MeshBase_DtControlTr_get, _TetonTest.Teton_MeshBase_DtControlTr_set)
    __swig_setmethods__["DtControlTe"] = _TetonTest.Teton_MeshBase_DtControlTe_set
    __swig_getmethods__["DtControlTe"] = _TetonTest.Teton_MeshBase_DtControlTe_get
    if _newclass:DtControlTe = _swig_property(_TetonTest.Teton_MeshBase_DtControlTe_get, _TetonTest.Teton_MeshBase_DtControlTe_set)
    __swig_setmethods__["DtControlTrOld"] = _TetonTest.Teton_MeshBase_DtControlTrOld_set
    __swig_getmethods__["DtControlTrOld"] = _TetonTest.Teton_MeshBase_DtControlTrOld_get
    if _newclass:DtControlTrOld = _swig_property(_TetonTest.Teton_MeshBase_DtControlTrOld_get, _TetonTest.Teton_MeshBase_DtControlTrOld_set)
    __swig_setmethods__["DtControlTeOld"] = _TetonTest.Teton_MeshBase_DtControlTeOld_set
    __swig_getmethods__["DtControlTeOld"] = _TetonTest.Teton_MeshBase_DtControlTeOld_get
    if _newclass:DtControlTeOld = _swig_property(_TetonTest.Teton_MeshBase_DtControlTeOld_get, _TetonTest.Teton_MeshBase_DtControlTeOld_set)
    __swig_setmethods__["erad"] = _TetonTest.Teton_MeshBase_erad_set
    __swig_getmethods__["erad"] = _TetonTest.Teton_MeshBase_erad_get
    if _newclass:erad = _swig_property(_TetonTest.Teton_MeshBase_erad_get, _TetonTest.Teton_MeshBase_erad_set)
    __swig_setmethods__["emat"] = _TetonTest.Teton_MeshBase_emat_set
    __swig_getmethods__["emat"] = _TetonTest.Teton_MeshBase_emat_get
    if _newclass:emat = _swig_property(_TetonTest.Teton_MeshBase_emat_get, _TetonTest.Teton_MeshBase_emat_set)
    __swig_setmethods__["eradinct"] = _TetonTest.Teton_MeshBase_eradinct_set
    __swig_getmethods__["eradinct"] = _TetonTest.Teton_MeshBase_eradinct_get
    if _newclass:eradinct = _swig_property(_TetonTest.Teton_MeshBase_eradinct_get, _TetonTest.Teton_MeshBase_eradinct_set)
    __swig_setmethods__["eradesct"] = _TetonTest.Teton_MeshBase_eradesct_set
    __swig_getmethods__["eradesct"] = _TetonTest.Teton_MeshBase_eradesct_get
    if _newclass:eradesct = _swig_property(_TetonTest.Teton_MeshBase_eradesct_get, _TetonTest.Teton_MeshBase_eradesct_set)
    __swig_setmethods__["eextsrc"] = _TetonTest.Teton_MeshBase_eextsrc_set
    __swig_getmethods__["eextsrc"] = _TetonTest.Teton_MeshBase_eextsrc_get
    if _newclass:eextsrc = _swig_property(_TetonTest.Teton_MeshBase_eextsrc_get, _TetonTest.Teton_MeshBase_eextsrc_set)
    __swig_setmethods__["echeck"] = _TetonTest.Teton_MeshBase_echeck_set
    __swig_getmethods__["echeck"] = _TetonTest.Teton_MeshBase_echeck_get
    if _newclass:echeck = _swig_property(_TetonTest.Teton_MeshBase_echeck_get, _TetonTest.Teton_MeshBase_echeck_set)
    __swig_setmethods__["TrMax"] = _TetonTest.Teton_MeshBase_TrMax_set
    __swig_getmethods__["TrMax"] = _TetonTest.Teton_MeshBase_TrMax_get
    if _newclass:TrMax = _swig_property(_TetonTest.Teton_MeshBase_TrMax_get, _TetonTest.Teton_MeshBase_TrMax_set)
    __swig_setmethods__["TeMax"] = _TetonTest.Teton_MeshBase_TeMax_set
    __swig_getmethods__["TeMax"] = _TetonTest.Teton_MeshBase_TeMax_get
    if _newclass:TeMax = _swig_property(_TetonTest.Teton_MeshBase_TeMax_get, _TetonTest.Teton_MeshBase_TeMax_set)
    __swig_setmethods__["TiMax"] = _TetonTest.Teton_MeshBase_TiMax_set
    __swig_getmethods__["TiMax"] = _TetonTest.Teton_MeshBase_TiMax_get
    if _newclass:TiMax = _swig_property(_TetonTest.Teton_MeshBase_TiMax_get, _TetonTest.Teton_MeshBase_TiMax_set)
    __swig_setmethods__["tfloor"] = _TetonTest.Teton_MeshBase_tfloor_set
    __swig_getmethods__["tfloor"] = _TetonTest.Teton_MeshBase_tfloor_get
    if _newclass:tfloor = _swig_property(_TetonTest.Teton_MeshBase_tfloor_get, _TetonTest.Teton_MeshBase_tfloor_set)
    __swig_setmethods__["tmin"] = _TetonTest.Teton_MeshBase_tmin_set
    __swig_getmethods__["tmin"] = _TetonTest.Teton_MeshBase_tmin_get
    if _newclass:tmin = _swig_property(_TetonTest.Teton_MeshBase_tmin_get, _TetonTest.Teton_MeshBase_tmin_set)
    __swig_setmethods__["dtrad"] = _TetonTest.Teton_MeshBase_dtrad_set
    __swig_getmethods__["dtrad"] = _TetonTest.Teton_MeshBase_dtrad_get
    if _newclass:dtrad = _swig_property(_TetonTest.Teton_MeshBase_dtrad_get, _TetonTest.Teton_MeshBase_dtrad_set)
    __swig_setmethods__["epstmp"] = _TetonTest.Teton_MeshBase_epstmp_set
    __swig_getmethods__["epstmp"] = _TetonTest.Teton_MeshBase_epstmp_get
    if _newclass:epstmp = _swig_property(_TetonTest.Teton_MeshBase_epstmp_get, _TetonTest.Teton_MeshBase_epstmp_set)
    __swig_setmethods__["epsinr"] = _TetonTest.Teton_MeshBase_epsinr_set
    __swig_getmethods__["epsinr"] = _TetonTest.Teton_MeshBase_epsinr_get
    if _newclass:epsinr = _swig_property(_TetonTest.Teton_MeshBase_epsinr_get, _TetonTest.Teton_MeshBase_epsinr_set)
    __swig_setmethods__["epsgda"] = _TetonTest.Teton_MeshBase_epsgda_set
    __swig_getmethods__["epsgda"] = _TetonTest.Teton_MeshBase_epsgda_get
    if _newclass:epsgda = _swig_property(_TetonTest.Teton_MeshBase_epsgda_get, _TetonTest.Teton_MeshBase_epsgda_set)
    __swig_setmethods__["delte"] = _TetonTest.Teton_MeshBase_delte_set
    __swig_getmethods__["delte"] = _TetonTest.Teton_MeshBase_delte_get
    if _newclass:delte = _swig_property(_TetonTest.Teton_MeshBase_delte_get, _TetonTest.Teton_MeshBase_delte_set)
    __swig_setmethods__["deltr"] = _TetonTest.Teton_MeshBase_deltr_set
    __swig_getmethods__["deltr"] = _TetonTest.Teton_MeshBase_deltr_get
    if _newclass:deltr = _swig_property(_TetonTest.Teton_MeshBase_deltr_get, _TetonTest.Teton_MeshBase_deltr_set)
    __swig_setmethods__["timerad"] = _TetonTest.Teton_MeshBase_timerad_set
    __swig_getmethods__["timerad"] = _TetonTest.Teton_MeshBase_timerad_get
    if _newclass:timerad = _swig_property(_TetonTest.Teton_MeshBase_timerad_get, _TetonTest.Teton_MeshBase_timerad_set)
    __swig_setmethods__["angleLoopTime"] = _TetonTest.Teton_MeshBase_angleLoopTime_set
    __swig_getmethods__["angleLoopTime"] = _TetonTest.Teton_MeshBase_angleLoopTime_get
    if _newclass:angleLoopTime = _swig_property(_TetonTest.Teton_MeshBase_angleLoopTime_get, _TetonTest.Teton_MeshBase_angleLoopTime_set)
    __swig_setmethods__["dtrmn"] = _TetonTest.Teton_MeshBase_dtrmn_set
    __swig_getmethods__["dtrmn"] = _TetonTest.Teton_MeshBase_dtrmn_get
    if _newclass:dtrmn = _swig_property(_TetonTest.Teton_MeshBase_dtrmn_get, _TetonTest.Teton_MeshBase_dtrmn_set)
    __swig_setmethods__["dtrmx"] = _TetonTest.Teton_MeshBase_dtrmx_set
    __swig_getmethods__["dtrmx"] = _TetonTest.Teton_MeshBase_dtrmx_get
    if _newclass:dtrmx = _swig_property(_TetonTest.Teton_MeshBase_dtrmx_get, _TetonTest.Teton_MeshBase_dtrmx_set)
    __swig_setmethods__["igeom"] = _TetonTest.Teton_MeshBase_igeom_set
    __swig_getmethods__["igeom"] = _TetonTest.Teton_MeshBase_igeom_get
    if _newclass:igeom = _swig_property(_TetonTest.Teton_MeshBase_igeom_get, _TetonTest.Teton_MeshBase_igeom_set)
    __swig_setmethods__["ittyp"] = _TetonTest.Teton_MeshBase_ittyp_set
    __swig_getmethods__["ittyp"] = _TetonTest.Teton_MeshBase_ittyp_get
    if _newclass:ittyp = _swig_property(_TetonTest.Teton_MeshBase_ittyp_get, _TetonTest.Teton_MeshBase_ittyp_set)
    __swig_setmethods__["iaccel"] = _TetonTest.Teton_MeshBase_iaccel_set
    __swig_getmethods__["iaccel"] = _TetonTest.Teton_MeshBase_iaccel_get
    if _newclass:iaccel = _swig_property(_TetonTest.Teton_MeshBase_iaccel_get, _TetonTest.Teton_MeshBase_iaccel_set)
    __swig_setmethods__["imatc"] = _TetonTest.Teton_MeshBase_imatc_set
    __swig_getmethods__["imatc"] = _TetonTest.Teton_MeshBase_imatc_get
    if _newclass:imatc = _swig_property(_TetonTest.Teton_MeshBase_imatc_get, _TetonTest.Teton_MeshBase_imatc_set)
    __swig_setmethods__["iscat"] = _TetonTest.Teton_MeshBase_iscat_set
    __swig_getmethods__["iscat"] = _TetonTest.Teton_MeshBase_iscat_get
    if _newclass:iscat = _swig_property(_TetonTest.Teton_MeshBase_iscat_get, _TetonTest.Teton_MeshBase_iscat_set)
    __swig_setmethods__["itimsrc"] = _TetonTest.Teton_MeshBase_itimsrc_set
    __swig_getmethods__["itimsrc"] = _TetonTest.Teton_MeshBase_itimsrc_get
    if _newclass:itimsrc = _swig_property(_TetonTest.Teton_MeshBase_itimsrc_get, _TetonTest.Teton_MeshBase_itimsrc_set)
    __swig_setmethods__["decomp_s"] = _TetonTest.Teton_MeshBase_decomp_s_set
    __swig_getmethods__["decomp_s"] = _TetonTest.Teton_MeshBase_decomp_s_get
    if _newclass:decomp_s = _swig_property(_TetonTest.Teton_MeshBase_decomp_s_get, _TetonTest.Teton_MeshBase_decomp_s_set)
    __swig_setmethods__["ConvControlReason"] = _TetonTest.Teton_MeshBase_ConvControlReason_set
    __swig_getmethods__["ConvControlReason"] = _TetonTest.Teton_MeshBase_ConvControlReason_get
    if _newclass:ConvControlReason = _swig_property(_TetonTest.Teton_MeshBase_ConvControlReason_get, _TetonTest.Teton_MeshBase_ConvControlReason_set)
    __swig_setmethods__["DtControlReason"] = _TetonTest.Teton_MeshBase_DtControlReason_set
    __swig_getmethods__["DtControlReason"] = _TetonTest.Teton_MeshBase_DtControlReason_get
    if _newclass:DtControlReason = _swig_property(_TetonTest.Teton_MeshBase_DtControlReason_get, _TetonTest.Teton_MeshBase_DtControlReason_set)
    __swig_setmethods__["IterControls"] = _TetonTest.Teton_MeshBase_IterControls_set
    __swig_getmethods__["IterControls"] = _TetonTest.Teton_MeshBase_IterControls_get
    if _newclass:IterControls = _swig_property(_TetonTest.Teton_MeshBase_IterControls_get, _TetonTest.Teton_MeshBase_IterControls_set)
    __swig_setmethods__["DtControls"] = _TetonTest.Teton_MeshBase_DtControls_set
    __swig_getmethods__["DtControls"] = _TetonTest.Teton_MeshBase_DtControls_get
    if _newclass:DtControls = _swig_property(_TetonTest.Teton_MeshBase_DtControls_get, _TetonTest.Teton_MeshBase_DtControls_set)
    __swig_setmethods__["Size"] = _TetonTest.Teton_MeshBase_Size_set
    __swig_getmethods__["Size"] = _TetonTest.Teton_MeshBase_Size_get
    if _newclass:Size = _swig_property(_TetonTest.Teton_MeshBase_Size_get, _TetonTest.Teton_MeshBase_Size_set)
    __swig_setmethods__["Geometry"] = _TetonTest.Teton_MeshBase_Geometry_set
    __swig_getmethods__["Geometry"] = _TetonTest.Teton_MeshBase_Geometry_get
    if _newclass:Geometry = _swig_property(_TetonTest.Teton_MeshBase_Geometry_get, _TetonTest.Teton_MeshBase_Geometry_set)
    __swig_setmethods__["Material"] = _TetonTest.Teton_MeshBase_Material_set
    __swig_getmethods__["Material"] = _TetonTest.Teton_MeshBase_Material_get
    if _newclass:Material = _swig_property(_TetonTest.Teton_MeshBase_Material_get, _TetonTest.Teton_MeshBase_Material_set)
    __swig_setmethods__["Quadrature"] = _TetonTest.Teton_MeshBase_Quadrature_set
    __swig_getmethods__["Quadrature"] = _TetonTest.Teton_MeshBase_Quadrature_get
    if _newclass:Quadrature = _swig_property(_TetonTest.Teton_MeshBase_Quadrature_get, _TetonTest.Teton_MeshBase_Quadrature_set)
    __swig_setmethods__["Editor"] = _TetonTest.Teton_MeshBase_Editor_set
    __swig_getmethods__["Editor"] = _TetonTest.Teton_MeshBase_Editor_get
    if _newclass:Editor = _swig_property(_TetonTest.Teton_MeshBase_Editor_get, _TetonTest.Teton_MeshBase_Editor_set)
    __swig_setmethods__["Profile"] = _TetonTest.Teton_MeshBase_Profile_set
    __swig_getmethods__["Profile"] = _TetonTest.Teton_MeshBase_Profile_get
    if _newclass:Profile = _swig_property(_TetonTest.Teton_MeshBase_Profile_get, _TetonTest.Teton_MeshBase_Profile_set)
    __swig_setmethods__["quaddef"] = _TetonTest.Teton_MeshBase_quaddef_set
    __swig_getmethods__["quaddef"] = _TetonTest.Teton_MeshBase_quaddef_get
    if _newclass:quaddef = _swig_property(_TetonTest.Teton_MeshBase_quaddef_get, _TetonTest.Teton_MeshBase_quaddef_set)
    __swig_setmethods__["psir"] = _TetonTest.Teton_MeshBase_psir_set
    __swig_getmethods__["psir"] = _TetonTest.Teton_MeshBase_psir_get
    if _newclass:psir = _swig_property(_TetonTest.Teton_MeshBase_psir_get, _TetonTest.Teton_MeshBase_psir_set)
    __swig_setmethods__["phir"] = _TetonTest.Teton_MeshBase_phir_set
    __swig_getmethods__["phir"] = _TetonTest.Teton_MeshBase_phir_get
    if _newclass:phir = _swig_property(_TetonTest.Teton_MeshBase_phir_get, _TetonTest.Teton_MeshBase_phir_set)
    __swig_setmethods__["RadSpecificEnergy"] = _TetonTest.Teton_MeshBase_RadSpecificEnergy_set
    __swig_getmethods__["RadSpecificEnergy"] = _TetonTest.Teton_MeshBase_RadSpecificEnergy_get
    if _newclass:RadSpecificEnergy = _swig_property(_TetonTest.Teton_MeshBase_RadSpecificEnergy_get, _TetonTest.Teton_MeshBase_RadSpecificEnergy_set)
    __swig_setmethods__["tec"] = _TetonTest.Teton_MeshBase_tec_set
    __swig_getmethods__["tec"] = _TetonTest.Teton_MeshBase_tec_get
    if _newclass:tec = _swig_property(_TetonTest.Teton_MeshBase_tec_get, _TetonTest.Teton_MeshBase_tec_set)
    __swig_setmethods__["tic"] = _TetonTest.Teton_MeshBase_tic_set
    __swig_getmethods__["tic"] = _TetonTest.Teton_MeshBase_tic_get
    if _newclass:tic = _swig_property(_TetonTest.Teton_MeshBase_tic_get, _TetonTest.Teton_MeshBase_tic_set)
    __swig_setmethods__["curesc"] = _TetonTest.Teton_MeshBase_curesc_set
    __swig_getmethods__["curesc"] = _TetonTest.Teton_MeshBase_curesc_get
    if _newclass:curesc = _swig_property(_TetonTest.Teton_MeshBase_curesc_get, _TetonTest.Teton_MeshBase_curesc_set)
    __swig_setmethods__["curinc"] = _TetonTest.Teton_MeshBase_curinc_set
    __swig_getmethods__["curinc"] = _TetonTest.Teton_MeshBase_curinc_get
    if _newclass:curinc = _swig_property(_TetonTest.Teton_MeshBase_curinc_get, _TetonTest.Teton_MeshBase_curinc_set)
    __swig_setmethods__["eradesc"] = _TetonTest.Teton_MeshBase_eradesc_set
    __swig_getmethods__["eradesc"] = _TetonTest.Teton_MeshBase_eradesc_get
    if _newclass:eradesc = _swig_property(_TetonTest.Teton_MeshBase_eradesc_get, _TetonTest.Teton_MeshBase_eradesc_set)
    __swig_setmethods__["eradinc"] = _TetonTest.Teton_MeshBase_eradinc_set
    __swig_getmethods__["eradinc"] = _TetonTest.Teton_MeshBase_eradinc_get
    if _newclass:eradinc = _swig_property(_TetonTest.Teton_MeshBase_eradinc_get, _TetonTest.Teton_MeshBase_eradinc_set)
    __swig_setmethods__["denez"] = _TetonTest.Teton_MeshBase_denez_set
    __swig_getmethods__["denez"] = _TetonTest.Teton_MeshBase_denez_get
    if _newclass:denez = _swig_property(_TetonTest.Teton_MeshBase_denez_get, _TetonTest.Teton_MeshBase_denez_set)
    __swig_setmethods__["deniz"] = _TetonTest.Teton_MeshBase_deniz_set
    __swig_getmethods__["deniz"] = _TetonTest.Teton_MeshBase_deniz_get
    if _newclass:deniz = _swig_property(_TetonTest.Teton_MeshBase_deniz_get, _TetonTest.Teton_MeshBase_deniz_set)
    __swig_setmethods__["trz"] = _TetonTest.Teton_MeshBase_trz_set
    __swig_getmethods__["trz"] = _TetonTest.Teton_MeshBase_trz_get
    if _newclass:trz = _swig_property(_TetonTest.Teton_MeshBase_trz_get, _TetonTest.Teton_MeshBase_trz_set)
    __swig_setmethods__["tez"] = _TetonTest.Teton_MeshBase_tez_set
    __swig_getmethods__["tez"] = _TetonTest.Teton_MeshBase_tez_get
    if _newclass:tez = _swig_property(_TetonTest.Teton_MeshBase_tez_get, _TetonTest.Teton_MeshBase_tez_set)
    __swig_setmethods__["tiz"] = _TetonTest.Teton_MeshBase_tiz_set
    __swig_getmethods__["tiz"] = _TetonTest.Teton_MeshBase_tiz_get
    if _newclass:tiz = _swig_property(_TetonTest.Teton_MeshBase_tiz_get, _TetonTest.Teton_MeshBase_tiz_set)
    __swig_setmethods__["px"] = _TetonTest.Teton_MeshBase_px_set
    __swig_getmethods__["px"] = _TetonTest.Teton_MeshBase_px_get
    if _newclass:px = _swig_property(_TetonTest.Teton_MeshBase_px_get, _TetonTest.Teton_MeshBase_px_set)
    __swig_setmethods__["siga"] = _TetonTest.Teton_MeshBase_siga_set
    __swig_getmethods__["siga"] = _TetonTest.Teton_MeshBase_siga_get
    if _newclass:siga = _swig_property(_TetonTest.Teton_MeshBase_siga_get, _TetonTest.Teton_MeshBase_siga_set)
    __swig_setmethods__["sigt"] = _TetonTest.Teton_MeshBase_sigt_set
    __swig_getmethods__["sigt"] = _TetonTest.Teton_MeshBase_sigt_get
    if _newclass:sigt = _swig_property(_TetonTest.Teton_MeshBase_sigt_get, _TetonTest.Teton_MeshBase_sigt_set)
    __swig_setmethods__["sigs"] = _TetonTest.Teton_MeshBase_sigs_set
    __swig_getmethods__["sigs"] = _TetonTest.Teton_MeshBase_sigs_get
    if _newclass:sigs = _swig_property(_TetonTest.Teton_MeshBase_sigs_get, _TetonTest.Teton_MeshBase_sigs_set)
    __swig_setmethods__["cve"] = _TetonTest.Teton_MeshBase_cve_set
    __swig_getmethods__["cve"] = _TetonTest.Teton_MeshBase_cve_get
    if _newclass:cve = _swig_property(_TetonTest.Teton_MeshBase_cve_get, _TetonTest.Teton_MeshBase_cve_set)
    __swig_setmethods__["cvi"] = _TetonTest.Teton_MeshBase_cvi_set
    __swig_getmethods__["cvi"] = _TetonTest.Teton_MeshBase_cvi_get
    if _newclass:cvi = _swig_property(_TetonTest.Teton_MeshBase_cvi_get, _TetonTest.Teton_MeshBase_cvi_set)
    __swig_setmethods__["rho"] = _TetonTest.Teton_MeshBase_rho_set
    __swig_getmethods__["rho"] = _TetonTest.Teton_MeshBase_rho_get
    if _newclass:rho = _swig_property(_TetonTest.Teton_MeshBase_rho_get, _TetonTest.Teton_MeshBase_rho_set)
    __swig_setmethods__["xomei"] = _TetonTest.Teton_MeshBase_xomei_set
    __swig_getmethods__["xomei"] = _TetonTest.Teton_MeshBase_xomei_get
    if _newclass:xomei = _swig_property(_TetonTest.Teton_MeshBase_xomei_get, _TetonTest.Teton_MeshBase_xomei_set)
    __swig_setmethods__["selec"] = _TetonTest.Teton_MeshBase_selec_set
    __swig_getmethods__["selec"] = _TetonTest.Teton_MeshBase_selec_get
    if _newclass:selec = _swig_property(_TetonTest.Teton_MeshBase_selec_get, _TetonTest.Teton_MeshBase_selec_set)
    __swig_setmethods__["sion"] = _TetonTest.Teton_MeshBase_sion_set
    __swig_getmethods__["sion"] = _TetonTest.Teton_MeshBase_sion_get
    if _newclass:sion = _swig_property(_TetonTest.Teton_MeshBase_sion_get, _TetonTest.Teton_MeshBase_sion_set)
    __swig_setmethods__["gnu"] = _TetonTest.Teton_MeshBase_gnu_set
    __swig_getmethods__["gnu"] = _TetonTest.Teton_MeshBase_gnu_get
    if _newclass:gnu = _swig_property(_TetonTest.Teton_MeshBase_gnu_get, _TetonTest.Teton_MeshBase_gnu_set)
    __swig_setmethods__["ncomm"] = _TetonTest.Teton_MeshBase_ncomm_set
    __swig_getmethods__["ncomm"] = _TetonTest.Teton_MeshBase_ncomm_get
    if _newclass:ncomm = _swig_property(_TetonTest.Teton_MeshBase_ncomm_get, _TetonTest.Teton_MeshBase_ncomm_set)
    __swig_setmethods__["nbshare"] = _TetonTest.Teton_MeshBase_nbshare_set
    __swig_getmethods__["nbshare"] = _TetonTest.Teton_MeshBase_nbshare_get
    if _newclass:nbshare = _swig_property(_TetonTest.Teton_MeshBase_nbshare_get, _TetonTest.Teton_MeshBase_nbshare_set)
    __swig_setmethods__["maxcf"] = _TetonTest.Teton_MeshBase_maxcf_set
    __swig_getmethods__["maxcf"] = _TetonTest.Teton_MeshBase_maxcf_get
    if _newclass:maxcf = _swig_property(_TetonTest.Teton_MeshBase_maxcf_get, _TetonTest.Teton_MeshBase_maxcf_set)
    __swig_setmethods__["nodecomm"] = _TetonTest.Teton_MeshBase_nodecomm_set
    __swig_getmethods__["nodecomm"] = _TetonTest.Teton_MeshBase_nodecomm_get
    if _newclass:nodecomm = _swig_property(_TetonTest.Teton_MeshBase_nodecomm_get, _TetonTest.Teton_MeshBase_nodecomm_set)
    __swig_setmethods__["cbdycomm"] = _TetonTest.Teton_MeshBase_cbdycomm_set
    __swig_getmethods__["cbdycomm"] = _TetonTest.Teton_MeshBase_cbdycomm_get
    if _newclass:cbdycomm = _swig_property(_TetonTest.Teton_MeshBase_cbdycomm_get, _TetonTest.Teton_MeshBase_cbdycomm_set)
    __swig_setmethods__["nfpc"] = _TetonTest.Teton_MeshBase_nfpc_set
    __swig_getmethods__["nfpc"] = _TetonTest.Teton_MeshBase_nfpc_get
    if _newclass:nfpc = _swig_property(_TetonTest.Teton_MeshBase_nfpc_get, _TetonTest.Teton_MeshBase_nfpc_set)
    __swig_setmethods__["connect"] = _TetonTest.Teton_MeshBase_connect_set
    __swig_getmethods__["connect"] = _TetonTest.Teton_MeshBase_connect_get
    if _newclass:connect = _swig_property(_TetonTest.Teton_MeshBase_connect_get, _TetonTest.Teton_MeshBase_connect_set)
    __swig_setmethods__["ctoface"] = _TetonTest.Teton_MeshBase_ctoface_set
    __swig_getmethods__["ctoface"] = _TetonTest.Teton_MeshBase_ctoface_get
    if _newclass:ctoface = _swig_property(_TetonTest.Teton_MeshBase_ctoface_get, _TetonTest.Teton_MeshBase_ctoface_set)
    __swig_setmethods__["ctozone"] = _TetonTest.Teton_MeshBase_ctozone_set
    __swig_getmethods__["ctozone"] = _TetonTest.Teton_MeshBase_ctozone_get
    if _newclass:ctozone = _swig_property(_TetonTest.Teton_MeshBase_ctozone_get, _TetonTest.Teton_MeshBase_ctozone_set)
    __swig_setmethods__["ctopoint"] = _TetonTest.Teton_MeshBase_ctopoint_set
    __swig_getmethods__["ctopoint"] = _TetonTest.Teton_MeshBase_ctopoint_get
    if _newclass:ctopoint = _swig_property(_TetonTest.Teton_MeshBase_ctopoint_get, _TetonTest.Teton_MeshBase_ctopoint_set)
    __swig_setmethods__["bdytoc"] = _TetonTest.Teton_MeshBase_bdytoc_set
    __swig_getmethods__["bdytoc"] = _TetonTest.Teton_MeshBase_bdytoc_get
    if _newclass:bdytoc = _swig_property(_TetonTest.Teton_MeshBase_bdytoc_get, _TetonTest.Teton_MeshBase_bdytoc_set)
    __swig_setmethods__["bdytosrc"] = _TetonTest.Teton_MeshBase_bdytosrc_set
    __swig_getmethods__["bdytosrc"] = _TetonTest.Teton_MeshBase_bdytosrc_get
    if _newclass:bdytosrc = _swig_property(_TetonTest.Teton_MeshBase_bdytosrc_get, _TetonTest.Teton_MeshBase_bdytosrc_set)
    __swig_setmethods__["bdytoedit"] = _TetonTest.Teton_MeshBase_bdytoedit_set
    __swig_getmethods__["bdytoedit"] = _TetonTest.Teton_MeshBase_bdytoedit_get
    if _newclass:bdytoedit = _swig_property(_TetonTest.Teton_MeshBase_bdytoedit_get, _TetonTest.Teton_MeshBase_bdytoedit_set)
    __swig_setmethods__["bdytobc"] = _TetonTest.Teton_MeshBase_bdytobc_set
    __swig_getmethods__["bdytobc"] = _TetonTest.Teton_MeshBase_bdytobc_get
    if _newclass:bdytobc = _swig_property(_TetonTest.Teton_MeshBase_bdytobc_get, _TetonTest.Teton_MeshBase_bdytobc_set)
    __swig_setmethods__["zonetosrc"] = _TetonTest.Teton_MeshBase_zonetosrc_set
    __swig_getmethods__["zonetosrc"] = _TetonTest.Teton_MeshBase_zonetosrc_get
    if _newclass:zonetosrc = _swig_property(_TetonTest.Teton_MeshBase_zonetosrc_get, _TetonTest.Teton_MeshBase_zonetosrc_set)
Teton_MeshBase_swigregister = _TetonTest.Teton_MeshBase_swigregister
Teton_MeshBase_swigregister(Teton_MeshBase)

class TetonBoundaryVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonBoundaryVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonBoundaryVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.TetonBoundaryVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.TetonBoundaryVector___nonzero__(self)
    def __bool__(self): return _TetonTest.TetonBoundaryVector___bool__(self)
    def __len__(self): return _TetonTest.TetonBoundaryVector___len__(self)
    def pop(self): return _TetonTest.TetonBoundaryVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.TetonBoundaryVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.TetonBoundaryVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.TetonBoundaryVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.TetonBoundaryVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.TetonBoundaryVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.TetonBoundaryVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.TetonBoundaryVector_append(self, *args)
    def empty(self): return _TetonTest.TetonBoundaryVector_empty(self)
    def size(self): return _TetonTest.TetonBoundaryVector_size(self)
    def clear(self): return _TetonTest.TetonBoundaryVector_clear(self)
    def swap(self, *args): return _TetonTest.TetonBoundaryVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.TetonBoundaryVector_get_allocator(self)
    def begin(self): return _TetonTest.TetonBoundaryVector_begin(self)
    def end(self): return _TetonTest.TetonBoundaryVector_end(self)
    def rbegin(self): return _TetonTest.TetonBoundaryVector_rbegin(self)
    def rend(self): return _TetonTest.TetonBoundaryVector_rend(self)
    def pop_back(self): return _TetonTest.TetonBoundaryVector_pop_back(self)
    def erase(self, *args): return _TetonTest.TetonBoundaryVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_TetonBoundaryVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.TetonBoundaryVector_push_back(self, *args)
    def front(self): return _TetonTest.TetonBoundaryVector_front(self)
    def back(self): return _TetonTest.TetonBoundaryVector_back(self)
    def assign(self, *args): return _TetonTest.TetonBoundaryVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.TetonBoundaryVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.TetonBoundaryVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.TetonBoundaryVector_reserve(self, *args)
    def capacity(self): return _TetonTest.TetonBoundaryVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_TetonBoundaryVector
    __del__ = lambda self : None;
TetonBoundaryVector_swigregister = _TetonTest.TetonBoundaryVector_swigregister
TetonBoundaryVector_swigregister(TetonBoundaryVector)

class TetonFreqVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonFreqVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonFreqVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.TetonFreqVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.TetonFreqVector___nonzero__(self)
    def __bool__(self): return _TetonTest.TetonFreqVector___bool__(self)
    def __len__(self): return _TetonTest.TetonFreqVector___len__(self)
    def pop(self): return _TetonTest.TetonFreqVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.TetonFreqVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.TetonFreqVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.TetonFreqVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.TetonFreqVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.TetonFreqVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.TetonFreqVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.TetonFreqVector_append(self, *args)
    def empty(self): return _TetonTest.TetonFreqVector_empty(self)
    def size(self): return _TetonTest.TetonFreqVector_size(self)
    def clear(self): return _TetonTest.TetonFreqVector_clear(self)
    def swap(self, *args): return _TetonTest.TetonFreqVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.TetonFreqVector_get_allocator(self)
    def begin(self): return _TetonTest.TetonFreqVector_begin(self)
    def end(self): return _TetonTest.TetonFreqVector_end(self)
    def rbegin(self): return _TetonTest.TetonFreqVector_rbegin(self)
    def rend(self): return _TetonTest.TetonFreqVector_rend(self)
    def pop_back(self): return _TetonTest.TetonFreqVector_pop_back(self)
    def erase(self, *args): return _TetonTest.TetonFreqVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_TetonFreqVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.TetonFreqVector_push_back(self, *args)
    def front(self): return _TetonTest.TetonFreqVector_front(self)
    def back(self): return _TetonTest.TetonFreqVector_back(self)
    def assign(self, *args): return _TetonTest.TetonFreqVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.TetonFreqVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.TetonFreqVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.TetonFreqVector_reserve(self, *args)
    def capacity(self): return _TetonTest.TetonFreqVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_TetonFreqVector
    __del__ = lambda self : None;
TetonFreqVector_swigregister = _TetonTest.TetonFreqVector_swigregister
TetonFreqVector_swigregister(TetonFreqVector)

class TetonVolumeSourceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TetonVolumeSourceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TetonVolumeSourceVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.TetonVolumeSourceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.TetonVolumeSourceVector___nonzero__(self)
    def __bool__(self): return _TetonTest.TetonVolumeSourceVector___bool__(self)
    def __len__(self): return _TetonTest.TetonVolumeSourceVector___len__(self)
    def pop(self): return _TetonTest.TetonVolumeSourceVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.TetonVolumeSourceVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.TetonVolumeSourceVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.TetonVolumeSourceVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.TetonVolumeSourceVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.TetonVolumeSourceVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.TetonVolumeSourceVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.TetonVolumeSourceVector_append(self, *args)
    def empty(self): return _TetonTest.TetonVolumeSourceVector_empty(self)
    def size(self): return _TetonTest.TetonVolumeSourceVector_size(self)
    def clear(self): return _TetonTest.TetonVolumeSourceVector_clear(self)
    def swap(self, *args): return _TetonTest.TetonVolumeSourceVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.TetonVolumeSourceVector_get_allocator(self)
    def begin(self): return _TetonTest.TetonVolumeSourceVector_begin(self)
    def end(self): return _TetonTest.TetonVolumeSourceVector_end(self)
    def rbegin(self): return _TetonTest.TetonVolumeSourceVector_rbegin(self)
    def rend(self): return _TetonTest.TetonVolumeSourceVector_rend(self)
    def pop_back(self): return _TetonTest.TetonVolumeSourceVector_pop_back(self)
    def erase(self, *args): return _TetonTest.TetonVolumeSourceVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_TetonVolumeSourceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.TetonVolumeSourceVector_push_back(self, *args)
    def front(self): return _TetonTest.TetonVolumeSourceVector_front(self)
    def back(self): return _TetonTest.TetonVolumeSourceVector_back(self)
    def assign(self, *args): return _TetonTest.TetonVolumeSourceVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.TetonVolumeSourceVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.TetonVolumeSourceVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.TetonVolumeSourceVector_reserve(self, *args)
    def capacity(self): return _TetonTest.TetonVolumeSourceVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_TetonVolumeSourceVector
    __del__ = lambda self : None;
TetonVolumeSourceVector_swigregister = _TetonTest.TetonVolumeSourceVector_swigregister
TetonVolumeSourceVector_swigregister(TetonVolumeSourceVector)

class Region_MeshBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Region_MeshBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Region_MeshBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TetonTest.new_Region_MeshBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_Region_MeshBase
    __del__ = lambda self : None;
Region_MeshBase_swigregister = _TetonTest.Region_MeshBase_swigregister
Region_MeshBase_swigregister(Region_MeshBase)

class Part_MeshBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Part_MeshBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Part_MeshBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TetonTest.new_Part_MeshBase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TetonTest.delete_Part_MeshBase
    __del__ = lambda self : None;
Part_MeshBase_swigregister = _TetonTest.Part_MeshBase_swigregister
Part_MeshBase_swigregister(Part_MeshBase)

class PartList_MeshBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartList_MeshBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartList_MeshBase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TetonTest.new_PartList_MeshBase(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPart(self, *args): return _TetonTest.PartList_MeshBase_addPart(self, *args)
    __swig_destroy__ = _TetonTest.delete_PartList_MeshBase
    __del__ = lambda self : None;
PartList_MeshBase_swigregister = _TetonTest.PartList_MeshBase_swigregister
PartList_MeshBase_swigregister(PartList_MeshBase)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.IntVector___nonzero__(self)
    def __bool__(self): return _TetonTest.IntVector___bool__(self)
    def __len__(self): return _TetonTest.IntVector___len__(self)
    def pop(self): return _TetonTest.IntVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.IntVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.IntVector_append(self, *args)
    def empty(self): return _TetonTest.IntVector_empty(self)
    def size(self): return _TetonTest.IntVector_size(self)
    def clear(self): return _TetonTest.IntVector_clear(self)
    def swap(self, *args): return _TetonTest.IntVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.IntVector_get_allocator(self)
    def begin(self): return _TetonTest.IntVector_begin(self)
    def end(self): return _TetonTest.IntVector_end(self)
    def rbegin(self): return _TetonTest.IntVector_rbegin(self)
    def rend(self): return _TetonTest.IntVector_rend(self)
    def pop_back(self): return _TetonTest.IntVector_pop_back(self)
    def erase(self, *args): return _TetonTest.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.IntVector_push_back(self, *args)
    def front(self): return _TetonTest.IntVector_front(self)
    def back(self): return _TetonTest.IntVector_back(self)
    def assign(self, *args): return _TetonTest.IntVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.IntVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.IntVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.IntVector_reserve(self, *args)
    def capacity(self): return _TetonTest.IntVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _TetonTest.IntVector_swigregister
IntVector_swigregister(IntVector)

class ZoneVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZoneVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZoneVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.ZoneVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.ZoneVector___nonzero__(self)
    def __bool__(self): return _TetonTest.ZoneVector___bool__(self)
    def __len__(self): return _TetonTest.ZoneVector___len__(self)
    def pop(self): return _TetonTest.ZoneVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.ZoneVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.ZoneVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.ZoneVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.ZoneVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.ZoneVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.ZoneVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.ZoneVector_append(self, *args)
    def empty(self): return _TetonTest.ZoneVector_empty(self)
    def size(self): return _TetonTest.ZoneVector_size(self)
    def clear(self): return _TetonTest.ZoneVector_clear(self)
    def swap(self, *args): return _TetonTest.ZoneVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.ZoneVector_get_allocator(self)
    def begin(self): return _TetonTest.ZoneVector_begin(self)
    def end(self): return _TetonTest.ZoneVector_end(self)
    def rbegin(self): return _TetonTest.ZoneVector_rbegin(self)
    def rend(self): return _TetonTest.ZoneVector_rend(self)
    def pop_back(self): return _TetonTest.ZoneVector_pop_back(self)
    def erase(self, *args): return _TetonTest.ZoneVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_ZoneVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.ZoneVector_push_back(self, *args)
    def front(self): return _TetonTest.ZoneVector_front(self)
    def back(self): return _TetonTest.ZoneVector_back(self)
    def assign(self, *args): return _TetonTest.ZoneVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.ZoneVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.ZoneVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.ZoneVector_reserve(self, *args)
    def capacity(self): return _TetonTest.ZoneVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_ZoneVector
    __del__ = lambda self : None;
ZoneVector_swigregister = _TetonTest.ZoneVector_swigregister
ZoneVector_swigregister(ZoneVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _TetonTest.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _TetonTest.StringVector___nonzero__(self)
    def __bool__(self): return _TetonTest.StringVector___bool__(self)
    def __len__(self): return _TetonTest.StringVector___len__(self)
    def pop(self): return _TetonTest.StringVector_pop(self)
    def __getslice__(self, *args): return _TetonTest.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _TetonTest.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _TetonTest.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _TetonTest.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _TetonTest.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _TetonTest.StringVector___setitem__(self, *args)
    def append(self, *args): return _TetonTest.StringVector_append(self, *args)
    def empty(self): return _TetonTest.StringVector_empty(self)
    def size(self): return _TetonTest.StringVector_size(self)
    def clear(self): return _TetonTest.StringVector_clear(self)
    def swap(self, *args): return _TetonTest.StringVector_swap(self, *args)
    def get_allocator(self): return _TetonTest.StringVector_get_allocator(self)
    def begin(self): return _TetonTest.StringVector_begin(self)
    def end(self): return _TetonTest.StringVector_end(self)
    def rbegin(self): return _TetonTest.StringVector_rbegin(self)
    def rend(self): return _TetonTest.StringVector_rend(self)
    def pop_back(self): return _TetonTest.StringVector_pop_back(self)
    def erase(self, *args): return _TetonTest.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _TetonTest.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _TetonTest.StringVector_push_back(self, *args)
    def front(self): return _TetonTest.StringVector_front(self)
    def back(self): return _TetonTest.StringVector_back(self)
    def assign(self, *args): return _TetonTest.StringVector_assign(self, *args)
    def resize(self, *args): return _TetonTest.StringVector_resize(self, *args)
    def insert(self, *args): return _TetonTest.StringVector_insert(self, *args)
    def reserve(self, *args): return _TetonTest.StringVector_reserve(self, *args)
    def capacity(self): return _TetonTest.StringVector_capacity(self)
    __swig_destroy__ = _TetonTest.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _TetonTest.StringVector_swigregister
StringVector_swigregister(StringVector)


def getZoneIDs(*args):
  return _TetonTest.getZoneIDs(*args)
getZoneIDs = _TetonTest.getZoneIDs

def newDT(*args):
  return _TetonTest.newDT(*args)
newDT = _TetonTest.newDT

def advance(*args):
  return _TetonTest.advance(*args)
advance = _TetonTest.advance

def dumpEdit(*args):
  return _TetonTest.dumpEdit(*args)
dumpEdit = _TetonTest.dumpEdit

def dumpLineout(*args):
  return _TetonTest.dumpLineout(*args)
dumpLineout = _TetonTest.dumpLineout

def setBoundary(*args):
  return _TetonTest.setBoundary(*args)
setBoundary = _TetonTest.setBoundary

def setFrequencies(*args):
  return _TetonTest.setFrequencies(*args)
setFrequencies = _TetonTest.setFrequencies

def checkAnalyticAnswer(*args):
  return _TetonTest.checkAnalyticAnswer(*args)
checkAnalyticAnswer = _TetonTest.checkAnalyticAnswer


